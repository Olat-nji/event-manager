name: 🚀 Run Tests & Deploy Event Manager

on:
  push:
    branches:
      - main
  # Uncomment to allow manual triggering from the Actions tab
  # workflow_dispatch:

jobs:
  run-tests:
    name: Run Tests ✅
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v3

      - name: ⚡ Set Up PHP 8.2
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: zip, bcmath
          coverage: none
          tools: composer:v2

      - name: 🗄️ Cache Composer Dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-${{ runner.os }}-

      - name: 📦 Install Composer Dependencies (if cache missed)
        run: |
          composer config http-basic.nova.laravel.com "${{ secrets.NOVA_USERNAME }}" "${{ secrets.NOVA_LICENSE_KEY }}"
          composer install --no-interaction --prefer-dist --optimize-autoloader
        if: steps.cache-composer.outputs.cache-hit != 'true'

      - name: 🗄️ Cache Node Modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-

      - name: 📦 Install Node.js & Dependencies
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: 📦 Install Node Modules (if cache missed)
        run: npm ci
        if: steps.cache-node.outputs.cache-hit != 'true'

      - name: 🗄️ Cache Built Assets
        uses: actions/cache@v3
        with:
          path: public/build
          key: vite-assets-${{ runner.os }}-${{ hashFiles('resources/**/*') }}
          restore-keys: |
            vite-assets-${{ runner.os }}-

      - name: 🔨 Build Frontend Assets (if cache missed)
        run: npm run build
        if: steps.cache-vite.outputs.cache-hit != 'true'

      - name: 🛠️ Run Tests
        run: |
          touch database/database.sqlite
          php artisan test

      - name: 🔍 Run PHP Linting
        run: find . -path ./vendor -prune -o -type f -name "*.php" -print | xargs -n1 php -l

  deploy:
    name: Deploy to Production 🚀
    runs-on: ubuntu-latest
    needs: run-tests # Only runs if tests pass
    if: success()

    steps:
      - name: 🔗 Trigger Deployment Webhook
        run: |
          curl -X POST -H "Content-Type: application/json" \
          ${{ secrets.LARAVEL_CLOUD_DEPLOY_WEBHOOK }}
